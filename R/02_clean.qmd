---
title: "Load project data"
format: html
editor: visual
---

## Load libraries

```{r, message=FALSE}
suppressWarnings({
library("tidyverse")
library("here")
library("broom")
})
```

## Clean the meta data

```{r}
suppressWarnings({
#Data is loaded without defined column names
meta_data <- read_csv(here("data/IDs_mapping.csv"),
                      na = "", 
                      col_names = c("type_id", "description"), 
                      show_col_types = FALSE)


# Remove NA columns and add a column based on admission type, that is numeric. The NA values in this, will be the names of the type of metadata the id describes. Also adds a meta_type column, which has the type in the cells that are NAs in the numeric type_id_as_num
meta_data <- meta_data |> 
  na.omit() |> 
  mutate(type_id, 
         type_id_as_num = as.numeric(type_id)) |> 
  mutate(meta_type = ifelse(is.na(type_id_as_num), 
                            type_id, 
                            NA))

#Fills meta_type with the last non-NA cell 
meta_data <- meta_data |> 
    fill(meta_type)

#Removes the rows containing the names, drops admission_type_is_as_num
meta_data_clean <- meta_data |> 
  filter(!is.na(type_id_as_num)) |> 
  select(!type_id) |> 
  rename(type_id = type_id_as_num)

})

admission_type <- meta_data_clean |> 
  filter(meta_type == "admission_type_id") |> 
  select(-meta_type)

discharge_disposition <- meta_data_clean |> 
  filter(meta_type == "discharge_disposition_id") |> 
  select(-meta_type)

admission_source <- meta_data_clean |> 
  filter(meta_type == "admission_source_id") |> 
  select(-meta_type)
```

## Clean ICD9 data

The data is downloaded here as the newest version from 2014:

[ICD-9-CM Diagnosis and Procedure Codes: Abbreviated and Full Code Titles \| CMS](https://www.cms.gov/medicare/coding-billing/icd-10-codes/icd-9-cm-diagnosis-procedure-codes-abbreviated-and-full-code-titles)

From the files the short and long ds are chosen (sg are surgical and dx are diagnosises).

```{r}
ICD9_short <- read_csv(here("data/CMS32_DESC_SHORT_DX.txt"), 
                 col_names = "data", 
                 show_col_types = FALSE)

ICD9_short <- ICD9_short |> 
  separate(col = data,
           into = c("ID", "Description_short"), 
           extra = "merge")

ICD9_long <- read_csv(here("data/CMS32_DESC_long_DX.txt"), 
                 col_names = "data", 
                 show_col_types = FALSE)

ICD9_long <- ICD9_long |> 
  separate(col = data,
           into = c("ID", "Description_long"), 
           extra = "merge")

ICD9 <- left_join(ICD9_short, 
                 ICD9_long)
```

```{r}
ICD9 <- ICD9 |> 
  mutate(ID = ifelse(str_starts(ID, 
                                 'V'),
                      ID, 
                      str_c(substr(ID, 
                                   1, 
                                   3),
                            ".",
                            substr(ID, 
                                   4, 
                                   length(ID))))) |> 
  mutate(ID = ifelse(str_starts(ID, 
                                 'V'),
                     ID, 
                     as.double(ID)))
```

##  Clean diabetes data

```{r}
diabetes_data <- read_csv(here("data/diabetic_data.csv"), 
                          na = c("?", "None"), 
                          show_col_types = FALSE)
```

```{r}
#Change NO in readmitted column to No
diabetes_data <- diabetes_data |> 
  mutate(readmitted, 
         readmitted = str_replace(string = readmitted, 
                                  "NO", 
                                  "No"))

#Change Ch in change column to Yes
diabetes_data <- diabetes_data |> 
  mutate(change, 
         change = str_replace(string = change, 
                                  "Ch", 
                                  "Yes"))


```

## Join information from metadata to diabetes data

```{r}

full_data <- diabetes_data |> 
  left_join(admission_type,
            join_by('admission_type_id' == 'type_id'), 
            relationship = "many-to-one") |>
  rename(admission_type = description) |> 
  relocate(admission_type, .after = admission_type_id) |> 
  select(-admission_type_id)

full_data <- full_data |> 
  left_join(admission_source,
            join_by('admission_source_id' == 'type_id'), 
            relationship = "many-to-one") |>
  rename(admission_source = description) |> 
  relocate(admission_source, .after = admission_source_id) |> 
  select(-admission_source_id)

full_data <- full_data |> 
  left_join(admission_source,
            join_by('discharge_disposition_id' == 'type_id'), 
            relationship = "many-to-one") |>
  rename(discharge_disposition = description) |> 
  relocate(discharge_disposition, .after = discharge_disposition_id) |> 
  select(-discharge_disposition_id)

```

## Join ICD9 to clean data

```{r}
full_data <- full_data |> 
  left_join(ICD9, 
            join_by('diag_1' == 'ID'), 
            relationship = "many-to-one", 
            na_matches = "never") |> 
  rename(diag_1_short = Description_short, 
          diag_1_long = Description_long)

full_data <- full_data |> 
  left_join(ICD9, 
            join_by('diag_2' == 'ID'), 
            relationship = "many-to-one", 
            na_matches = "never") |> 
  rename(diag_2_short = Description_short, 
         diag_2_long = Description_long)

full_data <- full_data |> 
  left_join(ICD9, 
            join_by('diag_3' == 'ID'), 
            relationship = "many-to-one", 
            na_matches = "never") |> 
  rename(diag_3_short = Description_short,
         diag_3_long = Description_long)


full_data <-  full_data |> 
  relocate(c(diag_1_short, 
             diag_2_short, 
             diag_3_short, 
             diag_1_long, 
             diag_2_long, 
             diag_3_long), .after = diag_1) |> 
  select(-diag_1m -diag2, -diag_3)
names(full_data)
```

## Output clean data

```{r}
write_csv(full_data, here("data/02_dat_clean.csv"))
```
